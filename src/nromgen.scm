(use srfi-1)
(use srfi-19)
(use file.util)

(define load-setting-file
  (lambda (fname)
    (format #t "load ~A" fname)
    (load fname)))

(define print-setting
  (lambda ()
    (format #t "function ~A~%" sin)
    (format #t "range ~A - ~A~%" *nr-min* *nr-max*)
    (format #t "adr width ~A~%"  *nr-adr-width*)
    (format #t "data width ~A (integer ~A)~%" *nr-W* *nr-I*)
    (format #t "module name ~A~%" *nr-module-name*)
    (format #t "output dir ~A~%" *nr-rtl-output-dir*)
    (format #t "testbench dir ~A~%" *nr-testbench-output-dir*)
    (format #t "template dir ~A~%" *nr-template-output-dir*)))

(define open-verilog-file
  (lambda (dir name)
    (let ((fname (string-append dir "/" name ".v")))                 
      (make-directory* dir)
      (format #t "open ~A~%" fname)
      (open-output-file fname)
      )))

(define close-verilog-file
  (lambda (fp)
    (close-output-port fp)))


(define make-header
  (lambda (fp name)
    (format fp "//-------------------------------------------------~%")
    (format fp "// ~A~%" name)
    (format fp "// This file was auto-generated by nromgen ~A~%" (date->string (current-date) "~5"))
    (format fp "//-------------------------------------------------~%")))

;;; --------------------------------------------------------------------------------
;;; make rom data
;;; --------------------------------------------------------------------------------

;; return x ^ n
(define power
  (lambda (x n)
    (if (= n 1)
        x
        (* (power x (- n 1)) x))))

(define quantize
  (lambda (x)
    (if (< x 0)
        (- x 1)
        x)))

(define toFix
  (lambda (x W I)
    (let ((val (* x (power 2 (- W I 1))))
          (max (- (power 2 (- W 1)) 1))
          (min (- (power 2 (- W 1)))))
      (let ((val_int (exact (values-ref (modf val) 1))))
        (clamp  (quantize val_int)  min  max)))))

(define make-data
  (lambda (func min max adrw W I)
    (let* ((num (power 2 adrw))
	   (data (make-vector num))
	   (unit (/ (- max min) num)))
      (dotimes(x num)
       (vector-set! data x (toFix (func (+ (* x unit) min)) W I)))
;      (print data)
      data)))


;;; --------------------------------------------------------------------------------
;;; verilog rtl
;;; --------------------------------------------------------------------------------

(define romdata->string
  (lambda (data dataw)
    (let ((format (- (power 2 dataw) 1)))
      (number->string (logand format data) 16))))

(define make-rtl
  (lambda (dir name data adrw dataw)
    (let ((fp (open-verilog-file dir name)))
      (make-header fp name)
      (format fp "module ~A~%" name)
      (format fp "\t(~%")
      (format fp "\tinput CLK,~%")
      (format fp "\tinput RESET_X,~%")
      (format fp "\tinput \[~A:0\] ADR,~%" (- adrw 1))
      (format fp "\toutput reg \[~A:0\] DATA~%" (- dataw 1))
      (format fp "\t);~%")
      (format fp "\talways @(posedge CLK or negedge RESET_X)begin~%")
      (format fp "\t\tif(RESET_X == 1'b0)begin~%")
      (format fp "\t\t\tDATA <= ~A'd0;~%" dataw)
      (format fp "\t\tend else begin~%")
      (format fp "\t\t\tcase(ADR)~%")
      (dotimes (x (power 2 adrw))
               (format fp "\t\t\t~A:DATA <= ~A'h~A;~%"
                       x dataw (romdata->string (vector-ref data x) dataw)))
      (format fp "\t\t\tendcase~%")
      (format fp "\t\tend~%")
      (format fp "\tend~%")
      (format fp "endmodule~%")
      (close-verilog-file fp))))

;;; --------------------------------------------------------------------------------
;;; verilog testbench
;;; --------------------------------------------------------------------------------

(define make-testbench
  (lambda (dir name adrw dataw)
    (let ((fname (string-append name "_tb")))
      (let ((fp (open-verilog-file dir fname)))
        (make-header fp fname)
        (format fp "module ~A ();~%" fname)
        ; wire/signal/variable
        (format fp "\treg CLK;~%")
        (format fp "\treg RESET_X;~%")
        (format fp "\treg \[~A:0\] ADR;~%" (- adrw 1))
        (format fp "\twire \[~A:0\] DATA;~%" (- dataw 1))
        (format fp "\tinteger i;~%")
        (format fp "~%")
        ; clk
        (format fp "\tparameter PERIOD = 10.0;~%")
        (format fp "\talways # (PERIOD/2) CLK = ~~CLK;~%")
        (format fp "\tinitial begin CLK = 1;end~%")
        (format fp "~%")
        ; instance
        (format fp "\t~A U0 (~%" name)
        (format fp "\t\t.CLK(CLK),~%")
        (format fp "\t\t.RESET_X(RESET_X),~%")
        (format fp "\t\t.ADR(ADR),~%")
        (format fp "\t\t.DATA(DATA)~%")
        (format fp "\t);~%")
        (format fp "~%")
        ; tb
        (format fp "\tinitial begin~%")
        (format fp "\t\ti=$fopen(\"dump.txt\");~%")
        (format fp "\t\t#1 RESET_X = 1; ADR = 0;~%")
        (format fp "\t\t# (PERIOD * 3)  RESET_X = 0;~%") 
        (format fp "\t\t# (PERIOD * 5)  RESET_X = 1;~%") 

        (format fp "\t\tfor(i=0;i<~A;i=i+1)begin~%" (power 2 adrw)) 
        (format fp "\t\t\tADR = i;~%")
        (format fp "\t\t\t# (PERIOD) $fwrite(i, \"%X\\n\", DATA);~%")            
        (format fp "\t\tend~%")  
        (format fp "\t\t# (PERIOD)  $finish();~%")
	(format fp "\tend~%")  
        (format fp "endmodule~%")
        (close-verilog-file fp)))))

;;; --------------------------------------------------------------------------------
;;; verilog template
;;; --------------------------------------------------------------------------------
(define make-template
  (lambda (dir name)
    (let ((fname (string-append name "_template")))
      (let ((fp (open-verilog-file dir fname)))
      (make-header fp fname)
      (format fp "~%")
      (format fp "\t~A ~A (~%" name name)
      (format fp "\t\t.CLK(),~%")
      (format fp "\t\t.RESET_X(),~%")
      (format fp "\t\t.ADR(),~%")
      (format fp "\t\t.DATA()~%")
      (format fp "\t);~%")
      (close-verilog-file fp)))))

;;; --------------------------------------------------------------------------------
;;; main
;;; --------------------------------------------------------------------------------
(define (main args)
  (let ((setting-fname (second args)))
    (load-setting-file setting-fname)
    (print-setting)
    (let ((data (make-data
                 *nr-func*
                 *nr-min*
                 *nr-max*
                 *nr-adr-width* 
                 *nr-W*
                 *nr-I*)))
      (make-rtl
       *nr-rtl-output-dir*
       *nr-module-name*
       data
       *nr-adr-width*
       *nr-W*
       )
      (make-testbench
       *nr-testbench-output-dir*
       *nr-module-name*
       *nr-adr-width*
       *nr-W*)
      (make-template *nr-template-output-dir* *nr-module-name*)))
  0)


